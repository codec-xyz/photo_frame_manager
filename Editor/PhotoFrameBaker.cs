using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace codec.PhotoFrame {
	public static class PhotoFrameBaker {
		public static string AssureAutoSaveFolder() {
			string baseFolder = "Assets";
			string folder = "PhotoFramesAutoGenerated";
			string folderPath = $"{baseFolder}/{folder}";

			if(!AssetDatabase.IsValidFolder(folderPath)) AssetDatabase.CreateFolder(baseFolder, folder);
			return folderPath;
		}

		public static TextureBaker.Input PhotoFrameToInput(PhotoFrame pf) {
			int shaderId = 0;
			if(pf.frameType && pf.frameType.material) shaderId = pf.frameType.material.GetInstanceID();

			pf.getAspectRatios(out float photoAspectRatio, out float frameAspectRatio);
			pf.getCropUV(photoAspectRatio, frameAspectRatio, out Vector2 uvMin, out Vector2 uvMax);

			return new TextureBaker.Input {
				texture = pf.photo,
				point = pf.transform.position,
				sortGroup = shaderId,
				uvMin = uvMin,
				uvMax = uvMax,
				size = pf.getFinalResolution(),
			};
		}

		public delegate void ImportAssets(string[] path);
		public static void Bake(PhotoFrame[] photoFrames, SceneSettings settings, bool isDebug, ImportAssets import = null) {
			if(photoFrames.Length == 0) return;
			TextureBaker.Input[] photoFrameInput = photoFrames.Select(PhotoFrameToInput).ToArray();
			TextureBaker.isDebug = isDebug;
			TextureBaker.Output[] outputs = TextureBaker.Bake(photoFrameInput, settings.textureSize, settings.margin, Mathf.Pow(settings.textureFit * 50f, 2), settings.skylineMaxSpread, out Texture2D[] textures);

			var texturePaths = new string[textures.Length];
			string folder = AssureAutoSaveFolder();
			for(int i = 0; i < textures.Length; i++) {
				string path = $"{folder}/Photo-Texture-{System.Guid.NewGuid()}.png";
				File.WriteAllBytes(path, textures[i].EncodeToPNG());
				texturePaths[i] = path;
			}

			if(import != null) import(texturePaths);

			settings.DeleteTexturesAndMaterials();
			settings.textures = new Texture2D[textures.Length];
			settings.materials = new Material[textures.Length];
			List<PhotoFrame>[] photoFramesSave = new List<PhotoFrame>[textures.Length];

			for(int i = 0; i < textures.Length; i++) {
				TextureImporter importer = (TextureImporter)TextureImporter.GetAtPath(texturePaths[i]);
				importer.mipmapEnabled = true;
				importer.streamingMipmaps = true;
				importer.maxTextureSize = textures[i].width;
				importer.SaveAndReimport();

				settings.textures[i] = AssetDatabase.LoadAssetAtPath<Texture2D>(texturePaths[i]);
				photoFramesSave[i] = new List<PhotoFrame>();

				Object.DestroyImmediate(textures[i]);
			}

			for(int i = 0; i < outputs.Length; i++) {
				if(outputs[i].texture == -1) {
					Debug.LogError($"Failed to bake PhotoFrame({photoFrames[i].name})");
					continue;
				}

				Texture2D texture = settings.textures[outputs[i].texture];
				Material material = settings.materials[outputs[i].texture];

				if(material == null) {
					if(photoFrames[i]?.frameType?.material) {
						material = new Material(photoFrames[i].frameType.material);
						if(photoFrames[i].frameType.textureSlot == "") material.mainTexture = texture;
						else material.SetTexture(photoFrames[i].frameType.textureSlot, texture);
					}
					else {
						material = new Material(Shader.Find("Unlit/Texture"));
						material.mainTexture = texture;
					}

					AssetDatabase.CreateAsset(material, $"{folder}/Photo-Material-{System.Guid.NewGuid()}.mat");

					settings.materials[outputs[i].texture] = material;
				}

				photoFrames[i].setSavedData(folder, material, outputs[i].uvMin, outputs[i].uvMax, outputs[i].uvRotate);
				photoFramesSave[outputs[i].texture].Add(photoFrames[i]);
			}

			settings.pfCounts = photoFramesSave.Select(a => a.Count).ToArray();
			settings.photoFrames = photoFramesSave.SelectMany(a => a).ToArray();
		}
	}
}